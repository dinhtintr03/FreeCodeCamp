box-sizing: content-box;
		border-box

Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.
To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.

display: flex;

Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

flex-direction: ...;
    row (default): horizontal axis with flex items from left to right
    row-reverse: horizontal axis with flex items from right to left
    column: vertical axis with flex items from top to bottom
    column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

flex-wrap: wrap;

justify-content: center;

align-items: center;

Notice how some of your images have become distorted. This is because the images have different aspect ratios. Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave.

object-fit: cover;

The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout.

gap: <row-gap>px <column-gap>px;

The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container.

.container::after {
  content: "";
  width: 860px;
}
